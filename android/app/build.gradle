def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"
apply plugin: 'com.google.gms.google-services'
apply plugin: 'com.google.firebase.crashlytics'

android {
    def releaseKey = new Properties()
    def keystorePropertiesFile = rootProject.file('releaseKey.properties')
    if (keystorePropertiesFile.exists()) {
        releaseKey.load(new FileInputStream(keystorePropertiesFile))
    }

    def debugKey = new Properties()
    def dKeystorePropertiesFile = rootProject.file('debugKey.properties')
    if (dKeystorePropertiesFile.exists()) {
        debugKey.load(new FileInputStream(dKeystorePropertiesFile))
    }

    compileSdkVersion 30
    ndkVersion "22.0.7026061"

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    lintOptions {
        disable 'InvalidPackage'
    }

    defaultConfig {
        applicationId "com.AndroidQuartz.churchdata"
        targetSdkVersion 30
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
    }

    signingConfigs {
        release {
            keyAlias releaseKey['keyAlias']
            keyPassword releaseKey['keyPassword']
            storeFile releaseKey['storeFile'] ? file(releaseKey['storeFile']) : null
            storePassword releaseKey['storePassword']
        }
        debug {
            keyAlias debugKey['keyAlias']
            keyPassword debugKey['keyPassword']
            storeFile debugKey['storeFile'] ? file(debugKey['storeFile']) : null
            storePassword debugKey['storePassword']
        }
    }
    buildTypes {
        debug{
            defaultConfig.minSdkVersion 25
            signingConfig signingConfigs.debug
            useProguard false
        }
        profile{
            defaultConfig.minSdkVersion 26
            signingConfig signingConfigs.debug
            minifyEnabled true
            shrinkResources true
        }
        release {
            defaultConfig.minSdkVersion 21
            signingConfig signingConfigs.release
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    buildToolsVersion '30.0.3'
}

configurations {
    all*.exclude group: 'com.google.guava', module: 'listenablefuture'
}

flutter {
    source '../..'
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
}