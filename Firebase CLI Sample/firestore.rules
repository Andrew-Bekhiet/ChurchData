rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
  
    function checkUserRegistered(){
        return request.auth.uid != null && request.auth.token.approved && (request.auth.token.personRef == null || 
        ((get(/databases/$(database)/documents/$(path(request.auth.token.personRef))).data.LastTanawol.toMillis() + 2592000000) > request.time.toMillis()
          && (get(/databases/$(database)/documents/$(path(request.auth.token.personRef))).data.LastConfession.toMillis() + 5184000000) > request.time.toMillis()));
    }

    function canApproveLocations(){
      return checkUserRegistered() && request.auth.token.approveLocations;
    }
    
    function checkLocationConfirmed(create){
        return canApproveLocations()
        || debug(isTheSame('Location', create) && isTheSame('LocationConfirmed', create))
        || debug(!isTheSame('Location', create)
          && request.resource.data.keys().hasAny(['LocationConfirmed'])
          && request.resource.data['LocationConfirmed'] == false)
        || debug(!isTheSame('Location', create) && (resource.data['LocationConfirmed'] == false || resource.data['LocationConfirmed'] == null));
    }

    function isTheSame(fieldName, create){
      return create || resource.data[fieldName] == request.resource.data[fieldName] || !request.resource.data.keys().hasAny([fieldName]);
    }
    
    match /Areas{
      allow list: if checkUserRegistered() && request.auth.token.superAccess;
      match /null {
        allow write: if false;
        allow read: if checkUserRegistered();
      }
      match /{area} {
        allow read: if checkUserRegistered() && (request.auth.token.superAccess || request.auth.uid in resource.data.Allowed);
        allow delete: if checkUserRegistered() && (request.auth.token.superAccess || request.auth.uid in resource.data.Allowed) && request.auth.token.write;
        allow update: if checkUserRegistered()
          && (request.auth.token.superAccess || request.auth.uid in resource.data.Allowed)
          && (request.resource.data.Allowed == resource.data.Allowed || (request.auth.token.manageUsers || (request.auth.token.manageAllowedUsers && (request.resource.data.Allowed.removeAll(resource.data.Allowed).hasOnly(get(/databases/$(database)/documents/Users/$(request.auth.uid)).data.allowedUsers) || resource.data.Allowed.removeAll(request.resource.data.Allowed).hasOnly(get(/databases/$(database)/documents/Users/$(request.auth.uid)).data.allowedUsers)))))
          && checkLocationConfirmed(false)
          && request.resource.data.LastEdit == request.auth.uid
          && request.auth.token.write;
        allow create: if checkUserRegistered()
          && (request.resource.data.Allowed.hasOnly([request.auth.uid]) || (request.auth.token.manageUsers || (request.auth.token.manageAllowedUsers && request.resource.data.Allowed.hasOnly(get(/databases/$(database)/documents/Users/$(request.auth.uid)).data.allowedUsers))))
          && checkLocationConfirmed(true)
          && request.resource.data.LastEdit == request.auth.uid
          && request.auth.token.write;
        match /{history=**} {
          allow read: if checkUserRegistered() && (request.auth.token.superAccess || request.auth.uid in (get(/databases/$(database)/documents/Areas/$(area))).data.Allowed);
        }
      }
    }
    match /Streets {
      allow list: if checkUserRegistered() && request.auth.token.superAccess;
      match /null {
        allow write: if false;
        allow read: if checkUserRegistered();
      }
      match /{street} {
        allow read: if checkUserRegistered() &&
          (request.auth.token.superAccess || resource.data.AreaId == null || request.auth.uid in get(resource.data.AreaId).data.Allowed);
        allow delete: if checkUserRegistered() &&
          (request.auth.token.superAccess || resource.data.AreaId == null || request.auth.uid in get(resource.data.AreaId).data.Allowed) && request.auth.token.write;
        allow update: if checkLocationConfirmed(false)
          && (request.auth.token.superAccess || resource.data.AreaId == null || request.auth.uid in get(resource.data.AreaId).data.Allowed)
          && request.resource.data.LastEdit == request.auth.uid
          && request.auth.token.write
          && request.resource.data.AreaId != null;
        allow create: if checkLocationConfirmed(true)
          && (request.auth.token.superAccess || request.auth.uid in get(request.resource.data.AreaId).data.Allowed)
          && request.resource.data.LastEdit == request.auth.uid
          && request.auth.token.write
          && request.resource.data.AreaId != null;
        
        match /{history=**} {
          allow read: if checkUserRegistered() && (request.auth.token.superAccess || request.auth.uid in get(get(/databases/$(database)/documents/Streets/$(street)).data.AreaId).data.Allowed);
        }
      }
    }
    match /Families {
      allow list: if checkUserRegistered() && request.auth.token.superAccess;
      match /null {
        allow write: if false;
        allow read: if checkUserRegistered();
      }
      match /{family} {
        allow read: if checkUserRegistered() &&
          (request.auth.token.superAccess || resource.data.AreaId == null || request.auth.uid in get(resource.data.AreaId).data.Allowed);
        allow delete: if checkUserRegistered() &&
          (request.auth.token.superAccess || resource.data.AreaId == null || request.auth.uid in get(resource.data.AreaId).data.Allowed) && request.auth.token.write;
        allow update: if checkLocationConfirmed(false)
          && (request.auth.token.superAccess
            || request.auth.uid in get(resource.data.AreaId).data.Allowed)
          && request.resource.data.LastEdit == request.auth.uid
          && request.auth.token.write
          && request.resource.data.AreaId != null
          && request.resource.data.StreetId != null;
        allow create: if checkLocationConfirmed(true)
          && (request.auth.token.superAccess
            || request.auth.uid in get(request.resource.data.AreaId).data.Allowed)
          && request.resource.data.LastEdit == request.auth.uid
          && request.auth.token.write
          && request.resource.data.AreaId != null
          && request.resource.data.StreetId != null;
      
        match /{history=**} {
          allow read: if checkUserRegistered() && (request.auth.token.superAccess || request.auth.uid in get(get(/databases/$(database)/documents/Families/$(family)).data.AreaId).data.Allowed);
        }
      }
    }
    match /Persons {
      allow list: if checkUserRegistered() && request.auth.token.superAccess;
      match /null {
        allow write: if false;
        allow read: if checkUserRegistered();
      }
      match /{person} {
        allow delete: if checkUserRegistered() &&
          (request.auth.token.superAccess || (resource.data.AreaId != null && request.auth.uid in get(resource.data.AreaId).data.Allowed)) && request.auth.token.write;
        allow read: if (checkUserRegistered() &&
          (request.auth.token.superAccess
            || resource.data.AreaId == null
            || request.auth.uid in get(resource.data.AreaId).data.Allowed)) ||
          (request.auth.uid != null
            && request.auth.token.personRef == 'Persons/' + person);
        allow create, update: if (checkUserRegistered()
            && request.resource.data.LastEdit == request.auth.uid
            && request.auth.token.write
            && request.resource.data.AreaId != null
            && request.resource.data.StreetId != null
            && request.resource.data.FamilyId != null)
          || (request.auth.uid != null
            && request.auth.token.personRef == 'Persons/' + person);
      
        match /{history=**} {
          allow read: if checkUserRegistered() && (request.auth.token.superAccess || request.auth.uid in get(get(/databases/$(database)/documents/Persons/$(person)).data.AreaId).data.Allowed);
        }
      }
    }

    match /{path=**}/{parent}/{doc} {
      allow read: if checkUserRegistered()
      && (parent == 'EditHistory' || parent == 'VisitHistory' || parent == 'FatherVisitHistory' || parent == 'CallHistory' || parent == 'TanawolHistory' || parent == 'ConfessionHistory')
      && (request.auth.token.superAccess || request.auth.uid in get(resource.data.AreaId).data.Allowed);
    }
    
    match /Invitations {
      allow list: if checkUserRegistered() && (request.auth.token.manageUsers || request.auth.token.manageAllowedUsers);
      match /{invitation} {
        allow read: if checkUserRegistered() && (request.auth.token.manageUsers || request.auth.token.manageAllowedUsers);
        allow create: if checkUserRegistered() && (request.auth.token.manageUsers || request.auth.token.manageAllowedUsers) && request.resource.data.GeneratedBy == request.auth.uid && request.resource.data.GeneratedOn.toMillis() == request.time.toMillis();
        allow delete, update: if checkUserRegistered() && (request.auth.token.manageUsers || request.auth.token.manageAllowedUsers) && resource.data.GeneratedBy == request.auth.uid;
      }
    }

    match /Deleted {
      allow list: if checkUserRegistered() && request.auth.token.superAccess;
      allow write: if false;
      match /{item} {
        allow read: if checkUserRegistered() && request.auth.token.superAccess;
        match /Areas {
          allow write: if false;
          allow read: if checkUserRegistered() && request.auth.token.manageDeleted == true
            && (request.auth.token.superAccess || request.auth.uid in resource.data.Allowed);
        }
        match /{item=**} {
          allow write: if false;
          allow read: if checkUserRegistered() && request.auth.token.manageDeleted == true
            && (request.auth.token.superAccess || resource.data.AreaId == null || request.auth.uid in get(resource.data.AreaId).data.Allowed);
        }
      }
    }

    match /Users {
      allow read: if checkUserRegistered();
      allow write: if false;
      match /null {
        allow write: if false;
        allow read: if checkUserRegistered();
      }
      match /{user=**} {
        allow write: if checkUserRegistered() && (request.auth.token.manageUsers || request.auth.token.manageAllowedUsers);
        allow read: if checkUserRegistered();
      }
    }
    match /Types {
      allow write: if checkUserRegistered() && request.auth.token.write;
      allow read: if request.auth.uid != null;
      match /{type=**} {
        allow write: if checkUserRegistered() && request.auth.token.write;
        allow read: if request.auth.uid != null;
      }
    }
    match /Fathers {
      allow write: if checkUserRegistered() && request.auth.token.write;
      allow read: if request.auth.uid != null;
      match /{item=**} {
        allow write: if checkUserRegistered() && request.auth.token.write;
        allow read: if request.auth.uid != null;
      }
    }
    match /Jobs {
      allow write: if checkUserRegistered() && request.auth.token.write;
      allow read: if request.auth.uid != null;
      match /{item=**} {
        allow write: if checkUserRegistered() && request.auth.token.write;
        allow read: if request.auth.uid != null;
      }
    }
    match /StudyYears {
      allow write: if checkUserRegistered() && request.auth.token.write;
      allow read: if request.auth.uid != null;
      match /{item=**} {
        allow write: if checkUserRegistered() && request.auth.token.write;
        allow read: if request.auth.uid != null;
      }
    }
    match /Colleges {
      allow write: if checkUserRegistered() && request.auth.token.write;
      allow read: if request.auth.uid != null;
      match /{item=**} {
        allow write: if checkUserRegistered() && request.auth.token.write;
        allow read: if request.auth.uid != null;
      }
    }
    match /Churches {
      allow write: if checkUserRegistered() && request.auth.token.write;
      allow read: if request.auth.uid != null;
      match /{church=**} {
        allow write: if checkUserRegistered() && request.auth.token.write;
        allow read: if request.auth.uid != null;
      }
    }
    match /States {
      allow read: if checkUserRegistered();
      allow write: if checkUserRegistered() && request.auth.token.superAccess;
      match /{state=**} {
        allow read: if checkUserRegistered();
        allow write: if checkUserRegistered() && request.auth.token.superAccess;
      }
    }
    match /ServingTypes {
      allow write: if checkUserRegistered() && request.auth.token.write;
      allow read: if request.auth.uid != null;
      match /{sType=**} {
        allow write: if checkUserRegistered() && request.auth.token.write;
        allow read: if request.auth.uid != null;
      }
    }
  }
}