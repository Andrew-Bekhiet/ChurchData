// Mocks generated by Mockito 5.0.16 from annotations
// in churchdata/test/main.dart.
// Do not manually edit this file.

import 'dart:async' as _i9;
import 'dart:ui' as _i11;

import 'package:cloud_functions/cloud_functions.dart' as _i5;
import 'package:cloud_functions_platform_interface/cloud_functions_platform_interface.dart'
    as _i4;
import 'package:firebase_auth/firebase_auth.dart' as _i7;
import 'package:firebase_auth_mocks/src/mock_user.dart' as _i12;
import 'package:firebase_auth_platform_interface/firebase_auth_platform_interface.dart'
    as _i13;
import 'package:firebase_core/firebase_core.dart' as _i2;
import 'package:firebase_messaging/firebase_messaging.dart' as _i8;
import 'package:firebase_messaging_platform_interface/firebase_messaging_platform_interface.dart'
    as _i3;
import 'package:firebase_remote_config/firebase_remote_config.dart' as _i10;
import 'package:firebase_remote_config_platform_interface/firebase_remote_config_platform_interface.dart'
    as _i6;
import 'package:local_auth/src/local_auth.dart' as _i14;
import 'package:local_auth_android/local_auth_android.dart' as _i16;
import 'package:local_auth_ios/local_auth_ios.dart' as _i15;
import 'package:local_auth_windows/local_auth_windows.dart' as _i17;
import 'package:mockito/mockito.dart' as _i1;
import 'package:url_launcher_platform_interface/url_launcher_platform_interface.dart'
    as _i18;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeFirebaseApp_0 extends _i1.Fake implements _i2.FirebaseApp {}

class _FakeNotificationSettings_1 extends _i1.Fake
    implements _i3.NotificationSettings {}

class _FakeFirebaseFunctionsPlatform_2 extends _i1.Fake
    implements _i4.FirebaseFunctionsPlatform {}

class _FakeHttpsCallable_3 extends _i1.Fake implements _i5.HttpsCallable {}

class _FakeDateTime_4 extends _i1.Fake implements DateTime {}

class _FakeRemoteConfigSettings_5 extends _i1.Fake
    implements _i6.RemoteConfigSettings {}

class _FakeRemoteConfigValue_6 extends _i1.Fake
    implements _i6.RemoteConfigValue {}

class _FakeUserMetadata_7 extends _i1.Fake implements _i7.UserMetadata {}

class _FakeIdTokenResult_8 extends _i1.Fake implements _i7.IdTokenResult {}

class _FakeUserCredential_9 extends _i1.Fake implements _i7.UserCredential {}

class _FakeConfirmationResult_10 extends _i1.Fake
    implements _i7.ConfirmationResult {}

class _FakeUser_11 extends _i1.Fake implements _i7.User {}

class _FakeHttpsCallablePlatform_12 extends _i1.Fake
    implements _i4.HttpsCallablePlatform {}

class _FakeHttpsCallableResult_13<T> extends _i1.Fake
    implements _i5.HttpsCallableResult<T> {}

/// A class which mocks [FirebaseMessaging].
///
/// See the documentation for Mockito's code generation for more information.
class MockFirebaseMessaging extends _i1.Mock implements _i8.FirebaseMessaging {
  MockFirebaseMessaging() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.FirebaseApp get app => (super.noSuchMethod(Invocation.getter(#app),
      returnValue: _FakeFirebaseApp_0()) as _i2.FirebaseApp);
  @override
  set app(_i2.FirebaseApp? _app) =>
      super.noSuchMethod(Invocation.setter(#app, _app),
          returnValueForMissingStub: null);
  @override
  bool get isAutoInitEnabled =>
      (super.noSuchMethod(Invocation.getter(#isAutoInitEnabled),
          returnValue: false) as bool);
  @override
  _i9.Stream<String> get onTokenRefresh =>
      (super.noSuchMethod(Invocation.getter(#onTokenRefresh),
          returnValue: Stream<String>.empty()) as _i9.Stream<String>);
  @override
  Map<dynamic, dynamic> get pluginConstants =>
      (super.noSuchMethod(Invocation.getter(#pluginConstants),
          returnValue: <dynamic, dynamic>{}) as Map<dynamic, dynamic>);
  @override
  _i9.Future<_i3.RemoteMessage?> getInitialMessage() =>
      (super.noSuchMethod(Invocation.method(#getInitialMessage, []),
              returnValue: Future<_i3.RemoteMessage?>.value())
          as _i9.Future<_i3.RemoteMessage?>);
  @override
  _i9.Future<void> deleteToken() =>
      (super.noSuchMethod(Invocation.method(#deleteToken, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  _i9.Future<String?> getAPNSToken() =>
      (super.noSuchMethod(Invocation.method(#getAPNSToken, []),
          returnValue: Future<String?>.value()) as _i9.Future<String?>);
  @override
  _i9.Future<String?> getToken({String? vapidKey}) => (super.noSuchMethod(
      Invocation.method(#getToken, [], {#vapidKey: vapidKey}),
      returnValue: Future<String?>.value()) as _i9.Future<String?>);
  @override
  bool isSupported() => (super.noSuchMethod(Invocation.method(#isSupported, []),
      returnValue: false) as bool);
  @override
  _i9.Future<_i3.NotificationSettings> getNotificationSettings() =>
      (super.noSuchMethod(Invocation.method(#getNotificationSettings, []),
              returnValue: Future<_i3.NotificationSettings>.value(
                  _FakeNotificationSettings_1()))
          as _i9.Future<_i3.NotificationSettings>);
  @override
  _i9.Future<_i3.NotificationSettings> requestPermission(
          {bool? alert = true,
          bool? announcement = false,
          bool? badge = true,
          bool? carPlay = false,
          bool? criticalAlert = false,
          bool? provisional = false,
          bool? sound = true}) =>
      (super.noSuchMethod(
              Invocation.method(#requestPermission, [], {
                #alert: alert,
                #announcement: announcement,
                #badge: badge,
                #carPlay: carPlay,
                #criticalAlert: criticalAlert,
                #provisional: provisional,
                #sound: sound
              }),
              returnValue: Future<_i3.NotificationSettings>.value(
                  _FakeNotificationSettings_1()))
          as _i9.Future<_i3.NotificationSettings>);
  @override
  _i9.Future<void> sendMessage(
          {String? to,
          Map<String, String>? data,
          String? collapseKey,
          String? messageId,
          String? messageType,
          int? ttl}) =>
      (super.noSuchMethod(
          Invocation.method(#sendMessage, [], {
            #to: to,
            #data: data,
            #collapseKey: collapseKey,
            #messageId: messageId,
            #messageType: messageType,
            #ttl: ttl
          }),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  _i9.Future<void> setAutoInitEnabled(bool? enabled) =>
      (super.noSuchMethod(Invocation.method(#setAutoInitEnabled, [enabled]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  _i9.Future<void> setForegroundNotificationPresentationOptions(
          {bool? alert = false, bool? badge = false, bool? sound = false}) =>
      (super.noSuchMethod(
          Invocation.method(#setForegroundNotificationPresentationOptions, [],
              {#alert: alert, #badge: badge, #sound: sound}),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  _i9.Future<void> subscribeToTopic(String? topic) =>
      (super.noSuchMethod(Invocation.method(#subscribeToTopic, [topic]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  _i9.Future<void> unsubscribeFromTopic(String? topic) =>
      (super.noSuchMethod(Invocation.method(#unsubscribeFromTopic, [topic]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
}

/// A class which mocks [FirebaseFunctions].
///
/// See the documentation for Mockito's code generation for more information.
class MockFirebaseFunctions extends _i1.Mock implements _i5.FirebaseFunctions {
  MockFirebaseFunctions() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.FirebaseApp get app => (super.noSuchMethod(Invocation.getter(#app),
      returnValue: _FakeFirebaseApp_0()) as _i2.FirebaseApp);
  @override
  _i4.FirebaseFunctionsPlatform get delegate =>
      (super.noSuchMethod(Invocation.getter(#delegate),
              returnValue: _FakeFirebaseFunctionsPlatform_2())
          as _i4.FirebaseFunctionsPlatform);
  @override
  Map<dynamic, dynamic> get pluginConstants =>
      (super.noSuchMethod(Invocation.getter(#pluginConstants),
          returnValue: <dynamic, dynamic>{}) as Map<dynamic, dynamic>);
  @override
  _i5.HttpsCallable httpsCallable(String? name,
          {_i4.HttpsCallableOptions? options}) =>
      (super.noSuchMethod(
          Invocation.method(#httpsCallable, [name], {#options: options}),
          returnValue: _FakeHttpsCallable_3()) as _i5.HttpsCallable);
  @override
  void useFunctionsEmulator(String? host, int? port) =>
      super.noSuchMethod(Invocation.method(#useFunctionsEmulator, [host, port]),
          returnValueForMissingStub: null);
}

/// A class which mocks [FirebaseRemoteConfig].
///
/// See the documentation for Mockito's code generation for more information.
class MockFirebaseRemoteConfig extends _i1.Mock
    implements _i10.FirebaseRemoteConfig {
  MockFirebaseRemoteConfig() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.FirebaseApp get app => (super.noSuchMethod(Invocation.getter(#app),
      returnValue: _FakeFirebaseApp_0()) as _i2.FirebaseApp);
  @override
  DateTime get lastFetchTime =>
      (super.noSuchMethod(Invocation.getter(#lastFetchTime),
          returnValue: _FakeDateTime_4()) as DateTime);
  @override
  _i6.RemoteConfigFetchStatus get lastFetchStatus =>
      (super.noSuchMethod(Invocation.getter(#lastFetchStatus),
              returnValue: _i6.RemoteConfigFetchStatus.noFetchYet)
          as _i6.RemoteConfigFetchStatus);
  @override
  _i6.RemoteConfigSettings get settings => (super.noSuchMethod(
      Invocation.getter(#settings),
      returnValue: _FakeRemoteConfigSettings_5()) as _i6.RemoteConfigSettings);
  @override
  Map<dynamic, dynamic> get pluginConstants =>
      (super.noSuchMethod(Invocation.getter(#pluginConstants),
          returnValue: <dynamic, dynamic>{}) as Map<dynamic, dynamic>);
  @override
  bool get hasListeners =>
      (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false)
          as bool);
  @override
  _i9.Future<bool> activate() =>
      (super.noSuchMethod(Invocation.method(#activate, []),
          returnValue: Future<bool>.value(false)) as _i9.Future<bool>);
  @override
  _i9.Future<void> ensureInitialized() =>
      (super.noSuchMethod(Invocation.method(#ensureInitialized, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  _i9.Future<void> fetch() => (super.noSuchMethod(Invocation.method(#fetch, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  _i9.Future<bool> fetchAndActivate() =>
      (super.noSuchMethod(Invocation.method(#fetchAndActivate, []),
          returnValue: Future<bool>.value(false)) as _i9.Future<bool>);
  @override
  Map<String, _i6.RemoteConfigValue> getAll() =>
      (super.noSuchMethod(Invocation.method(#getAll, []),
              returnValue: <String, _i6.RemoteConfigValue>{})
          as Map<String, _i6.RemoteConfigValue>);
  @override
  bool getBool(String? key) => (super
          .noSuchMethod(Invocation.method(#getBool, [key]), returnValue: false)
      as bool);
  @override
  int getInt(String? key) =>
      (super.noSuchMethod(Invocation.method(#getInt, [key]), returnValue: 0)
          as int);
  @override
  double getDouble(String? key) => (super
          .noSuchMethod(Invocation.method(#getDouble, [key]), returnValue: 0.0)
      as double);
  @override
  String getString(String? key) =>
      (super.noSuchMethod(Invocation.method(#getString, [key]), returnValue: '')
          as String);
  @override
  _i6.RemoteConfigValue getValue(String? key) =>
      (super.noSuchMethod(Invocation.method(#getValue, [key]),
          returnValue: _FakeRemoteConfigValue_6()) as _i6.RemoteConfigValue);
  @override
  _i9.Future<void> setConfigSettings(
          _i6.RemoteConfigSettings? remoteConfigSettings) =>
      (super.noSuchMethod(
          Invocation.method(#setConfigSettings, [remoteConfigSettings]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  _i9.Future<void> setDefaults(Map<String, dynamic>? defaultParameters) =>
      (super.noSuchMethod(Invocation.method(#setDefaults, [defaultParameters]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  void addListener(_i11.VoidCallback? listener) =>
      super.noSuchMethod(Invocation.method(#addListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void removeListener(_i11.VoidCallback? listener) =>
      super.noSuchMethod(Invocation.method(#removeListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void dispose() => super.noSuchMethod(Invocation.method(#dispose, []),
      returnValueForMissingStub: null);
  @override
  void notifyListeners() =>
      super.noSuchMethod(Invocation.method(#notifyListeners, []),
          returnValueForMissingStub: null);
}

/// A class which mocks [MockUser].
///
/// See the documentation for Mockito's code generation for more information.
class MockMockUser extends _i1.Mock implements _i12.MockUser {
  MockMockUser() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get isAnonymous =>
      (super.noSuchMethod(Invocation.getter(#isAnonymous), returnValue: false)
          as bool);
  @override
  bool get emailVerified =>
      (super.noSuchMethod(Invocation.getter(#emailVerified), returnValue: false)
          as bool);
  @override
  String get uid =>
      (super.noSuchMethod(Invocation.getter(#uid), returnValue: '') as String);
  @override
  _i7.UserMetadata get metadata =>
      (super.noSuchMethod(Invocation.getter(#metadata),
          returnValue: _FakeUserMetadata_7()) as _i7.UserMetadata);
  @override
  List<Object?> get props =>
      (super.noSuchMethod(Invocation.getter(#props), returnValue: <Object?>[])
          as List<Object?>);
  @override
  List<_i7.UserInfo> get providerData =>
      (super.noSuchMethod(Invocation.getter(#providerData),
          returnValue: <_i7.UserInfo>[]) as List<_i7.UserInfo>);
  @override
  _i9.Future<String> getIdToken([bool? forceRefresh = false]) =>
      (super.noSuchMethod(Invocation.method(#getIdToken, [forceRefresh]),
          returnValue: Future<String>.value('')) as _i9.Future<String>);
  @override
  _i9.Future<void> reload() =>
      (super.noSuchMethod(Invocation.method(#reload, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  _i9.Future<void> delete() =>
      (super.noSuchMethod(Invocation.method(#delete, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  _i9.Future<_i7.IdTokenResult> getIdTokenResult(
          [bool? forceRefresh = false]) =>
      (super.noSuchMethod(Invocation.method(#getIdTokenResult, [forceRefresh]),
              returnValue:
                  Future<_i7.IdTokenResult>.value(_FakeIdTokenResult_8()))
          as _i9.Future<_i7.IdTokenResult>);
  @override
  _i9.Future<_i7.UserCredential> linkWithCredential(
          _i7.AuthCredential? credential) =>
      (super.noSuchMethod(Invocation.method(#linkWithCredential, [credential]),
              returnValue:
                  Future<_i7.UserCredential>.value(_FakeUserCredential_9()))
          as _i9.Future<_i7.UserCredential>);
  @override
  _i9.Future<_i7.UserCredential> linkWithPopup(_i13.AuthProvider? provider) =>
      (super.noSuchMethod(Invocation.method(#linkWithPopup, [provider]),
              returnValue:
                  Future<_i7.UserCredential>.value(_FakeUserCredential_9()))
          as _i9.Future<_i7.UserCredential>);
  @override
  _i9.Future<_i7.ConfirmationResult> linkWithPhoneNumber(String? phoneNumber,
          [_i7.RecaptchaVerifier? verifier]) =>
      (super.noSuchMethod(
              Invocation.method(#linkWithPhoneNumber, [phoneNumber, verifier]),
              returnValue: Future<_i7.ConfirmationResult>.value(
                  _FakeConfirmationResult_10()))
          as _i9.Future<_i7.ConfirmationResult>);
  @override
  _i9.Future<_i7.UserCredential> reauthenticateWithCredential(
          _i7.AuthCredential? credential) =>
      (super.noSuchMethod(
              Invocation.method(#reauthenticateWithCredential, [credential]),
              returnValue:
                  Future<_i7.UserCredential>.value(_FakeUserCredential_9()))
          as _i9.Future<_i7.UserCredential>);
  @override
  _i9.Future<void> sendEmailVerification(
          [_i7.ActionCodeSettings? actionCodeSettings]) =>
      (super.noSuchMethod(
          Invocation.method(#sendEmailVerification, [actionCodeSettings]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  _i9.Future<_i7.User> unlink(String? providerId) =>
      (super.noSuchMethod(Invocation.method(#unlink, [providerId]),
              returnValue: Future<_i7.User>.value(_FakeUser_11()))
          as _i9.Future<_i7.User>);
  @override
  _i9.Future<void> updateEmail(String? newEmail) =>
      (super.noSuchMethod(Invocation.method(#updateEmail, [newEmail]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  _i9.Future<void> updatePassword(String? newPassword) =>
      (super.noSuchMethod(Invocation.method(#updatePassword, [newPassword]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  _i9.Future<void> updatePhoneNumber(
          _i7.PhoneAuthCredential? phoneCredential) =>
      (super.noSuchMethod(
          Invocation.method(#updatePhoneNumber, [phoneCredential]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  _i9.Future<void> updateDisplayName(String? displayName) =>
      (super.noSuchMethod(Invocation.method(#updateDisplayName, [displayName]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  _i9.Future<void> updatePhotoURL(String? photoURL) =>
      (super.noSuchMethod(Invocation.method(#updatePhotoURL, [photoURL]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  _i9.Future<void> updateProfile({String? displayName, String? photoURL}) =>
      (super.noSuchMethod(
          Invocation.method(#updateProfile, [],
              {#displayName: displayName, #photoURL: photoURL}),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  _i9.Future<void> verifyBeforeUpdateEmail(String? newEmail,
          [_i7.ActionCodeSettings? actionCodeSettings]) =>
      (super.noSuchMethod(
          Invocation.method(
              #verifyBeforeUpdateEmail, [newEmail, actionCodeSettings]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
}

/// A class which mocks [LocalAuthentication].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocalAuthentication extends _i1.Mock
    implements _i14.LocalAuthentication {
  MockLocalAuthentication() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i9.Future<bool> get canCheckBiometrics =>
      (super.noSuchMethod(Invocation.getter(#canCheckBiometrics),
          returnValue: Future<bool>.value(false)) as _i9.Future<bool>);
  @override
  _i9.Future<bool> authenticate(
          {String? localizedReason,
          Iterable<_i15.AuthMessages>? authMessages = const [
            _i15.IOSAuthMessages(),
            _i16.AndroidAuthMessages(),
            _i17.WindowsAuthMessages()
          ],
          _i15.AuthenticationOptions? options =
              const _i15.AuthenticationOptions()}) =>
      (super.noSuchMethod(
          Invocation.method(#authenticate, [], {
            #localizedReason: localizedReason,
            #authMessages: authMessages,
            #options: options
          }),
          returnValue: Future<bool>.value(false)) as _i9.Future<bool>);
  @override
  _i9.Future<bool> stopAuthentication() =>
      (super.noSuchMethod(Invocation.method(#stopAuthentication, []),
          returnValue: Future<bool>.value(false)) as _i9.Future<bool>);
  @override
  _i9.Future<bool> isDeviceSupported() =>
      (super.noSuchMethod(Invocation.method(#isDeviceSupported, []),
          returnValue: Future<bool>.value(false)) as _i9.Future<bool>);
  @override
  _i9.Future<List<_i15.BiometricType>> getAvailableBiometrics() =>
      (super.noSuchMethod(Invocation.method(#getAvailableBiometrics, []),
          returnValue: Future<List<_i15.BiometricType>>.value(
              <_i15.BiometricType>[])) as _i9.Future<List<_i15.BiometricType>>);
}

/// A class which mocks [HttpsCallable].
///
/// See the documentation for Mockito's code generation for more information.
class MockHttpsCallable extends _i1.Mock implements _i5.HttpsCallable {
  MockHttpsCallable() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.HttpsCallablePlatform get delegate =>
      (super.noSuchMethod(Invocation.getter(#delegate),
              returnValue: _FakeHttpsCallablePlatform_12())
          as _i4.HttpsCallablePlatform);
  @override
  _i9.Future<_i5.HttpsCallableResult<T>> call<T>([dynamic parameters]) =>
      (super.noSuchMethod(Invocation.method(#call, [parameters]),
              returnValue: Future<_i5.HttpsCallableResult<T>>.value(
                  _FakeHttpsCallableResult_13<T>()))
          as _i9.Future<_i5.HttpsCallableResult<T>>);
}

/// A class which mocks [UrlLauncherPlatform].
///
/// See the documentation for Mockito's code generation for more information.
class MockUrlLauncherPlatform extends _i1.Mock
    implements _i18.UrlLauncherPlatform {
  MockUrlLauncherPlatform() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i9.Future<bool> canLaunch(String? url) =>
      (super.noSuchMethod(Invocation.method(#canLaunch, [url]),
          returnValue: Future<bool>.value(false)) as _i9.Future<bool>);
  @override
  _i9.Future<bool> launch(String? url,
          {bool? useSafariVC,
          bool? useWebView,
          bool? enableJavaScript,
          bool? enableDomStorage,
          bool? universalLinksOnly,
          Map<String, String>? headers,
          String? webOnlyWindowName}) =>
      (super.noSuchMethod(
          Invocation.method(#launch, [
            url
          ], {
            #useSafariVC: useSafariVC,
            #useWebView: useWebView,
            #enableJavaScript: enableJavaScript,
            #enableDomStorage: enableDomStorage,
            #universalLinksOnly: universalLinksOnly,
            #headers: headers,
            #webOnlyWindowName: webOnlyWindowName
          }),
          returnValue: Future<bool>.value(false)) as _i9.Future<bool>);
  @override
  _i9.Future<void> closeWebView() =>
      (super.noSuchMethod(Invocation.method(#closeWebView, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
}
